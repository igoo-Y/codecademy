GRID ESSENTIALS
    gird 는 웹페이지 전체를 배치하는 방법.
    flexbox 가 하나의 레이아웃에서 항목을 배치하는데 유용한 반면, grid 는 2차원 레이아웃에 가장 유용함. 행과 열에 걸쳐 요소를 정렬하고 이동하는 도구.

    Creating a Grid
        grid 를 만들기 위해 gird container 와 grid items 가 필요함.
        grid container 는 grid items 를 담는 부모요소이며, 자식 요소인 grid items 를 스타일링하고 배치함.

        html 요소를 grid container 로 바꾸기 위해, 요소의 display를 grid 나 inline-grid 로 지정해야 함.
            grid : 블록 레벨, inline-grid 는 inline-grid 를 위함.


    Creating Columns
        디폴트로 grid 는 하나의 열로 나타남. 여기에 items 을 더하면 새로운 행에 생성됨.
        이를 바꾸기 위해 grid 에서 행과 열의 수를 정의해야 함.

        grid-template-columns 으로 열을 만들 수 있음.

        .grid {
            display: grid;
            width: 500px;
            grid-template-columns: 100px 200px;
        }

        이 예시에서는 두 가지 변화가 있음. 우선 열의 숫자를 정함. 여기서는 두 개의 열이 나타남. 그리고 각 열의 너비를 정함. 1번 열은 100px 이고, 2번 열은 200px 임.

        또한, 열의 크기는 percentage 로 조정할 수도 있음.

        .grid {
            display: grid;
            width: 1000px;
            grid-template-columns: 20% 50%;
        }

        여기서 전체 그리드의 너비는 1000px 이고 첫번째는 20%인 200px, 두번째는 50%인 500px.

        또한, 위 두가지를 혼합할 수 있는데 아래 예시에는 너비 20px, 40px, 60px 의 세 열이 있음.

        .grid {
            display: grid;
            width: 100px;
            grid-template-columns: 20px 40% 60px;
        }

        이때 그리드의 총 너비는 120px. 지정된 너비인 100px 을 초과함. 이렇게 하면 그리드가 다른 요소를 덮어버릴 수도 있는데 이를 피하는 방법도 있음.


    Creating Rows
        grid-template-rows 는 행의 사이즈와 수를 정하는 것.

        .grid {
            display: grid;
            width: 1000px;
            height: 500px;
            grid-template-columns: 100px 200px;
            grid-template-rows: 10% 20% 600px;
        }

        이 예시에서 그리드는 2개의 열과 3개의 행을 가짐. grid-template-rows 는 행의 숫자와 각 행의 높이를 결정.
        
        디폴트로 행의 크기는 그리드 내부에 균일하게 맞춰짐.

    Grid Template
        grid-template-columns 와 gird-template-rows 는 grid-template 으로 대체할 수 있음.

        .grid {
            display: grid;
            width: 1000px;
            height: 500px;
            grid-template: 200px 300px / 20% 10% 70%;
        }

        / 를 기준으로 앞에는 rows, 뒤는 columns

    Fraction
        그리드는 fr 이라는 단위를 사용. 이는 분수를 의미.

        fr 은 행과 열의 사이즈를 그리드의 너비와 높이에 맞게 분수로 만들어줌. 따라서, items 이 그리드 밖으로 벗어나지 않게 해줌.

        .grid {
            display: grid;
            width: 1000px;
            height: 400px;
            grid-template: 2fr 1fr 1fr / 1fr 3fr 1fr;
        }

        예시에서 행은 200px, 100px, 100px 이며 열은 200px, 600px, 200px 임.

        .grid {
            display: grid;
            width: 100px;
            grid-template-columns: 1fr 60px 1fr;
        }

        위 예시처럼 fr 과 다른 단위를 함께 사용하면 fr 은 사용 가능한 공간을 나타냄.

        즉 1번, 3번 열이 20px이 됨. 


    Repeat
        repeat() 을 사용해 그리드의 행과 열의 수를 정의하는 속성은 value 로 사용할 수 있음.

        .grid {
            display: grid;
            width: 300px;
            grid-template-columns: repeat(3, 100px);
        }

        여기에서는 3개의 열이 각각 100px 이라는 의미.

        repeat 은 fr 단위와 사용하기 좋고, repeat 안에 두번째 파라미터에서는 여러 값을 넣을 수 있음.
            grid-template-columns: repeat(2, 20px 50px)

    minmax
        지금까지 고정된 사이즈에서 그리드를 배웠는데, 웹페이지의 크기에 맞게 그리드 사이즈를 조정하고 싶을 때

        예를 들어, 100px 너비의 이미지가 그리드 안에 있는데 열이 100px 보다 작아지지 않길 바란다면 minmax() 를 사용하면 됨.

        .grid {
            display: grid;
            grid-template-columns: 100px minmax(100px, 500px) 100px;
        }

        여기서 첫번째와 세번째 열은 항상 100px 너비를 가지지만, 두번째 열은 100px~500px 의 너비를 가짐.

    Grid Gap
        grid-row-gap, grid-column-gap 으로 items 의 여백을 줄 수 있음.

        .grid {
            display: grid;
            width: 320px;
            grid-template-columns: repeat(3, 1fr);
            grid-column-gap: 10px;
        }

        grid gap 은 그리드의 시작과 끝에 여백을 주는 것은 아님.

        위 예시에서 3개의 열 사이 10px 의 여백.

        사이즈를 계산해보면, 그리드의 너비가 320px 이고 3개 행 사이 총 여백은 20px. 따라서 행의 너비는 각각 100px.

        grid-gap: 20px 10px; 이런 식으로 작성하면 row 와 column 에 여백을 동시에 줄 수 있음.
            이는 행 간 여백 20px, 열 간 여백 10px.
            값이 하나만 지정되면 행과 열에 모두 적용됨.

    Grid Items
        그리드 뿐만 아니라 item 의 사이즈도 설정할 수 있음.

    Multiple Row Items
        grid-row-start 와 grid-row-end 로 단일 그리드 항목이 여러 행을 차지할 수 있게 할 수 있음.
        이때 외부 container에 css 요소를 추가하는 것이 아니라 그리드 내부 요소에 css 를 추가하는 것임.

        .item {
            grid-row-start: 1;
            grid-row-end: 3;
        }

        예시에서 행 그리드 선과 열 그리드 선은 1부터 시작해서 3까지 생김. 즉 grid-row-start 는 그리드가 시작하는 행을 의미하고, grid-row-end 는 그리드가 끝나는 행.

    Grid Row
        grid-row 로 grid-row-start 와 grid-row-end 를 한번에 작성할 수 있음.

        .item {
            grid-row-start: 4;
            grid-row-end: 6;
        }

        .item {
            grid-row: 4 / 6;
        }

        두 코드는 같은 의미.

    Grid Column
        grid-column-start, grid-column-end, grid-column 는 grid row 와 같이 작동함.
        이때 span 을 사용해 다른 쪽 끝을 기준으로 열 또는 행을 시작하거나 끝낼 수 있음.

        .item {
            grid-column: 4 / span 2;
        }

        여기에서는 item 이 4열에서 시작해 4를 포함한 두 열의 공간을 차지하도록 함. 즉 4,5 열을 차지함
        span 은 요소의 그리드 끝 선을 결정할 때 발생할 수 있는 오류를 방지하기 때문에 유용함. 그리드 항목의 시작위치와 끝 위치를 알고 있다면 span을 사용할 것!

    Grid Area    
        grid-area 를 사용하면 grid-row, grid-column 을 한 줄에 작성할 수 있음.

        .item {
            grid-area: 2 / 3 / 4 / span 5;
        }

        grid-area 는 / 로 구분되는 4개의 값을 가짐. 순서가 중요한데, 순서는 아래와 같음.
            grid-row-start
            grid-column-start
            grid-row-end
            grid-column-end