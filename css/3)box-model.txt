THE BOX MODEL
    요소들이 웹사이트에서 어떻게 위치하고 보여지는 지에 대한 것.
    웹페이지의 모든 요소들은 브라우저에 의해 box 안에 살아있는 것으로 간주됨.

    요소의 box 의 치수, 테두리, 패딩, 마진


    The Box Model
        박스 모델은 웹페이지에서 공간을 차지하는 요소들의 부분을 정의하는 property 들로 구성되어 있음.
        width, height, padding, border, margin

        1. width, heigh: 컨텐츠 영역의 넓이와 높이
        2. padding: 컨텐츠와 테두리 사이의 공간
        3. border: 컨텐츠와 padding을 감싸는 테두리의 굵기와 스타일.
        4. margin: 요소의 외부 경계와 테두리 사이의 공간
    
    Height and Width
        HTML box 는 디폴트로 원래 컨텐츠의 넓이와 높이 값을 갖고 있음.
        아래와 같이 넓이와 높이 조절 가능.

        p {
            height: 80px;
            width: 240px;
        }

        픽셀 단위로 설정하면 모든 디바이스의 화면에서 같은 크기로 나타남. 예를 들어, 노트북 화면을 가득 채우는 요소는 모바일 화면에서 잘려서 나옴.

    Borders
        보더는 요소를 둘러싼 선. width, style, color 를 지정해야 함.

        1. width: 보더의 두께. thin, medium, thick 와 px 단위로 지정할 수 있음.
        2. style: 보더의 디자인. 10가지 스타일을 제공함. ex) none, dotted, solid 등
        3. color: 보더의 색상. 

        p {
            border: 3px solid coral;
        }

        디폴트 값은 medium none color 이고 여기서 color 는 컨텐츠의 color

        p.content-header {
            height: 80px;
            width: 240px;
            border: solid coral;
        }

        여기에서 두께가 지정되지 않았는데, 디폴트로 medium 으로 나옴.

    Border Radius
        보더를 직사각형이 아닌 형태로도 만들 수 있음. radius property 로 코너를 변경해 둥글게 만들기 가능함.

        div.container {
            border: 3px solid rgb(22, 77, 100);
            border-radius: 5px;
        }

        또한, 폭과 높이가 동일한 요소를 생성하고 radius 50% 를 사용해 원을 만들 수도 있음.

        div.container {
            height: 60px;
            width: 60px;
            border: 3px solid rgb(22, 77, 100);
            border-radius: 50%;
        }

    Padding I
        padding 은 컨텐츠와 보더 사이 공간.

        p.content-header {
            border: 3px solid coral;
            padding: 10px;
        }

        패딩은 컨텐츠에 여백을 만들어주고, 배경색을 넣어줄 때 자주 사용됨.

        padding-top
        padding-right
        padding-bottom
        padding-left

        위 property를 통해 상하좌우에 패딩을 넣을 수 있음.

        p.content-header {
            border: 3px solid fuschia;
            padding-bottom: 10px;
        }

    Padding II
        한번의 코드로 각 사이드에 패딩 값을 다르게 줄 수도 있음.

        p.content-header {
            border: 3px solid grey;
            padding: 6px 11px 4px 9px;
        }

        위의 6px 11px 4px 9px 은 각각 top (6 pixels), right (11 pixels), bottom (4 pixels), and left (9 pixels) 을 의미.
        이렇게 작성할 때는 모든 사이드의 패딩을 설정해야 함.

        그러나, 만약 상하 패딩 값이 동일하게 하고, 좌우 패딩 값이 동일하게 한다면 아래처럼 사용할 수 있음.

        p.content-header {
            padding: 5px 10px;
        }

        이는 상하 패딩 5px, 좌우 패딩 10px 이라는 뜻.

    Margins I
        마진은 박스의 바깥 공간.

        p {
            border: 1px solid aquamarine;
            margin: 20px;
        }

        margin-top
        margin-right
        margin-bottom
        margin-left

        위 property를 통해 상하좌우에 마진을 넣을 수 있음.

    Margins II
        한번의 코드로 각 사이드에 마진 값을 다르게 줄 수도 있음.

        p {
            margin: 6px 10px 5px 12px;
        }

        위의 6px 10px 5px 12px 는 각각 top (6 pixels), right (10 pixels), bottom (5 pixels), and left (12 pixels) 을 의미.

        패딩과 마찬가지로, 이렇게 작성하려면 네 사이드의 마진 값을 입력해야 함.

        또한, 상하에 같은 값, 좌우에 같은 값을 주면 아래처럼 쓸 수도 있음.

        p {
            margin: 6px 12px;
        }

        이는 상하 마진 6px, 좌우 마진 12px 을 의미.

    Auto
        마진 property 를 이용하면 컨텐츠를 중앙에 배치할 수 있음.

        div {
            margin: 0 auto;
        }

        0은 상하 마진 값을 0px 로, auto 는 브라우저가 좌우 마진을 자동으로 조정하도록 해서 컨텐츠를 중앙에 배치함.

        그런데, 중앙 정렬하려면 폭을 설정해줘야만 함. 그렇지 않으면, div의 넓이는 body 와 같이 포함 요소 전체 너비로 자동 설정됨. 페이지 전체 너비를 차지하는 요소는 가운데 배치가 불가능함.

        div.headline {
            width: 400px;
            margin: 0 auto;
        }

        이렇게 하면, 400 픽셀보다 더 큰 containing 요소 안에서 div 가 중앙에 배치됨.

    Margin Collapse(마진 축소)
        수직 마진은 겹치는 경우 축소됨. 수평 마진은 축소되지 않음. 대신 더 큰 마진 값이 두 요소 사이에 들어감.

        #img-one {
            margin-bottom: 30px;
        }
        
        #img-two {
            margin-top: 20px;
        }

        이 경우, 두 요소의 마진 값은 50px 이 아니라 30px

    Minimum and Maximum Height and Width
        화면 크기에 따라 요소의 크기가 달라지는 문제를 방지하기 위해, css 는 min-width, max-width 라는 property를 제공함. 이를 통해 폭의 넓이를 제한할 수 있음.

            min-width: 이 속성은 요소 박스의 최소 넓이를 정함. 
            max-width: 이 속성은 요소 박스의 최대 넓이를 정함.

        p {
            min-width: 300px;
            max-width: 600px;
        }

        위에서 p 는 300px 이하로 줄어들지 않으며 600px 이상으로 늘어나지도 않음.

        높이도 똑같이 설정할 수 있음.

            min-height: 이 속성은 요소 박스의 최소 높이를 정함. 
            max-height: 이 속성은 요소 박스의 최소 높이를 정함.

        p {
            min-height: 150px;
            max-height: 300px;
        }

        이 경우 p 의 높이는 150px 이하로 줄어들지 않고, 300px 이상으로 늘어나지 않음.

    Overflow
        컨텐츠의 크기가 containing area(부모요소) 보다 클 경우, 이 컨텐츠를 모두 보이게 하려면 overflow 를 사용함.

        hidden, scroll, visible 이라는 value 가 있음.
            hidden: 이 값을 설정하면 overflow 되는 모든 내용이 숨겨짐.
            scroll: 요소 박스에 스크롤 막대가 추가되어 나머지 내용을 스크롤해서 볼 수 있음.
            visible: overflow 된 내용이 containing 요소 외부에 표시됨. 이 값이 디폴트값.

    Resetting Defaults
        주요 브라우저들은 디폴트 stylesheet을 가지고 있음. 이를 user agent stylesheets 라고 부름.
        이때 디폴트 패딩과 마진 값을 갖고 있는 stylesheets 가 있음. 이러면, 개발자가 원하는 style을 제대로 못보여줄 수 있음.

        그래서 대부분의 개발자들은 디폴트 값을 리셋함.

        * {
            margin: 0;
            padding: 0;
        }

        위 코드는 모든 html 요소에서 마진과 패딩 값을 리셋하는 방법임. 이는 stylesheet 를 만들때 첫번째 css 규칙임.

    Visibility
        요소들은 visibility property 를 통해 뷰에서 숨겨질 수 있음.
            hidden: 요소 숨기기
            visible: 요소 보이기

        <ul>
            <li>Explore</li>
            <li>Connect</li>
            <li class="future">Donate</li>
        </ul>

        .future {
            visibility: hidden;
        }    

        이러면 future 클래스는 화면에서 숨겨짐. 하지만, 소스 코드에서는 볼 수 있음. 그리고 컨텐츠만 숨기는 것이기 때문에 빈공간이 보여짐.

        * display: none; 과 visibility: hidden; 의 차이점은 display: none; 은 웹페이지에서 제거해버리는 것이고 visibility: hidden; 은 웹페이지에서 보이지는 않지만 해당 공간은 남아 있음.







