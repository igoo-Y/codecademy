FLEXBOX
    flexbox 또는 flexible box layout 은 요소들의 포지션을 간단히 해주는 방법.

    flexbox 를 통해 요소들을 각각 또는 그룹으로 배치하기 쉬움.

    flexbox 의 주요 요소
        1. flex container
        2. flex items

        flexbox container 는 flex items 를 포함하는 요소. flexbox container 의 자식 요소들은 모두 flex items.
        이러한 flexbox container 와 flex items 를 구분하는 것이 중요.

        요소를 flex container 로 만들기 위해서는 해당 요소의 display 를 flex 나 inline-flex 로 지정해야 함.
        그리고 자식 요소들을 아래 속성을 통해 어떻게 배치할지 결정할 수 있음.

            justify-content
            align-items
            flex-grow
            flex-shrink
            flex-basis
            flex
            flex-wrap
            align-content
            flex-direction
            flex-flow

    display: flex
        모든 요소들은 flex container 가 될 수 있고, flex container 는 웹사이트를 화면 크기에 반응할 수 있게 만들어줌.
        flex container 의 자식 요소들은 부모 컨테이너의 크기와 위치에 따라서 자신의 크기와 위치를 바꿀 수 있음.

        div.container {
            display: flex;
        }

        위와 같이 display: flex; 로 지정하면 그 요소는 flex container 가 됨. 이때 flex container 의 자식요소들은 새 줄부터 시작되지 않고, 같은 줄에 생성됨.

    inline-flex
        만약 여러 개의 flex container 가 한 줄에 위치하려면 어떻게 해야 할까?

        만약 div 요소가 블록 레벨의 요소가 되지 않길 바란다면, display: inline-flex 를 사용하면 됨.

        <div class="container">
            <p>I’m inside of a flex container!</p>
            <p>A flex container’s children are flex items!</p>
        </div>
        <div class="container">
            <p>I’m also a flex item!</p>
            <p>Me too!</p>
        </div>

        .container {
            width: 200px;
            height: 200px;
            display: inline-flex;
        }

        위 예시에서 두 div 는 너비를 정하지 않으면 화면 전체로 뻗어나갈 것임. 그리고 p 요소는 블록 레벨이기 때문에 각각 상단에 위치함.
        그런데 이때 container 에 display: inline-flex; 를 설정하면, 두 div 는 같은 줄에 표시됨.

        <div class="container">
        <div class="child">
            <h1>1</h1>
        </div>
        <div class="child">
            <h1>2</h1>
        </div>
        </div>

        .container {
            width: 200px;
        }
        
        .child {
            display: inline-flex;
            width: 300px;
            height: auto;
        }

        위 예시처럼 자식 요소의 너비가 부모 요소의 너비보다 클 경우, 자식 요소의 너비는 부모요소의 너비에 맞춰짐.


    justify-content
        부모 요소를 display: flex 나 flex-inline; 으로 설정하면, 모든 자식 요소들은 디폴트로 부모 요소의 왼쪽 상단에 위치함.

        item 들을 왼쪽에서 오른쪽으로 배치하기 위해 justify-content 라는 속성을 사용.

        .container {
            display: flex;
            justify-content: flex-end;
        }

        위처럼 flex-end 값을 주면 모든 flex item 들이 flex container 의 오른쪽으로 이동함.

            1. flex-start: 모든 item 들이 부모 container 의 왼쪽에서부터 순서대로 위치함. 그리고 이전의 item 과 item 들 사이 간격이 없음.
            2. flex-end: 모든 item 들이 순서대로 배치되고, 맨 마지막 item 이 부모 container 의 오른쪽에서 시작됨. 마찬가지로 간격 없음.
            3. center: 모든 item 들이 순서대로 배치되고, 이전, 이후, 사이의 간격없이 부모 container 의 중앙에 정렬됨.
            4. space-around: item 들이 이전, 이후에 동일한 간격을 가짐. 따라서, 사이 간격은 두배가 됨.
            5. space-between: item 들이 동일한 사이 간격을 갖고 배치됨. 이때 이전, 이후 간격은 없음.

            여기에서 간격이 없다는 의미는 마진과 테두리는 존재하지만 요소들 사이에 추가적인 공간이 없다는 것. 각 flex item 들의 크기는 이 속성으로 바뀌지 않음.

    align-items
        flex item 들을 container 안에서 수직으로 정렬.

        .container {
            align-items: baseline;
        }

        이 예시에서 align-items: baseline; 은 베이스 라인에 따라 정렬된다는 의미.

            1. flex-start: 모든 요소들은 부모 container 의 상단에 위치.
            2. flex-end: 모든 요소들은 부모 container 의 하단에 위치.
            3. center: 모든 요소의 중심이 부모 container 의 상단과 하단 사이에 위치.
            4. baseline: 모든 item 의 내용 하단이 서로 정렬됨.
            5. stretch: 가능한 items 는 상단에서 하단으로 뻗어나감. 이때 높이를 지정한 만큼 뻗어나가며, 최소 높이를 지정해도 지정한 높이만큼 뻗어 나감.

            이 다섯 가지 값은 부모 container 의 크로스 축(수직축)을 따라 작동하는 방법.

        최대, 최소 너비와 최대, 최소 높이를 사용하는 것이 편리할 수 있음.

    flex-grow
        부모 container 가 flex-item 보다 작으면 크기가 늘어나지 않음. 그런데, 만약 부모 container가 크더라도 기본적으로 flex item 들은 늘어나지 않음.
        flex-grow 속성을 사용하면 컨테이너를 채우기 위해 항목이 증가해야 하는지 그리고 다른 항목에 비해 비례적으로 증가해야 하는지 또는 감소해야 하는지 지정할 수 있다.
        
        <div class="container">
            <div class="side">
                <h1>I’m on the side of the flex container!</h1>
            </div>
            <div class="center">
                <h1>I'm in the center of the flex container!</h1>
            </div>
            <div class="side">
                <h1>I'm on the other side of the flex container!</h1>
            </div>
        </div>

        .container {
            display: flex;
        }
        
        .side {
            width: 100px;
            flex-grow: 1;
        }
        
        .center {
            width: 100px;
            flex-grow: 2;
        }

        위의 예시에서 container 가 display의 flex 값을 가지고 있으므로 side, center 는 일렬로 위치할 것.
        컨테이너가 300 픽셀보다 크다면 flex item 들은 컨테이너를 채우기 위해 늘어날 것. 그리고 center div 는 side div 의 2배로 늘어남.
        그런데 만약 max-with 를 설정해주면 남는 공간이 있더라도 그것보다 늘어나지 않음.

    flex-shrink
        flex-grow 처럼 flex-shrink 는 요소가 비율에 맞게 줄어들게 함.
        컨테이너가 작을 때 아이템이 줄어드는 것은 flex-shrink 값이 디폴트로 1 이기 때문. 그러나 flex-grow 의 디폴트는 0이기 때문에 flex-grow 속성을 선언하지 않는 한
        flex-item 은 커지지 않음.

        <div class="container">
            <div class="side">
                <h1>I'm on the side of the flex container!</h1>
            </div>
            <div class="center">
                <h1>I'm in the center of the flex container!</h1>
            </div>
            <div class="side">
                <h1>I'm on the other side of the flex container!</h1>
            </div>
        </div>

        .container {
            display: flex;
        }
        
        .side {
            width: 100px;
            flex-shrink: 1;
        }
        
        .center {
            width: 100px;
            flex-shrink: 2;
        }

        이 예시에서 .center div 는 .side div 에 비해 절반으로 줄어들 것임. 만약 .container 가 너무 작다면.
        이때 마진 값은 영향을 받지 않음.

        기억할 점은 최대 최소 너비는 flex-grow 나 flex-shrink 에 전제적으로 적용됨. 즉 flex-grow 나 flex-shrink 는 만약 부모 컨테이너가 너무 작거나 브라우저가 조정될 때만 적용된다는 것.

    flex-basis
        flex-item 의 너비를 지정하는 또다른 방법은 flex-basis
        이 속성은 아이템이 늘어나거나 줄어들기 전에 넓이를 특정하는 방법.

        <div class="container">
            <div class=”side”>
                <h1>Left side!</h1>
            </div>
            <div class="center">
                <h1>Center!</h1>
            </div>
            <div class="side">
                <h1>Right side!</h1>
            </div>
        </div>

        .container {
            display: flex;
        }
        
        .side {
            flex-grow: 1;
            flex-basis: 100px;
        }
        
        .center {
            flex-grow: 2;
            flex-basis: 150px;
        }

        예시에서 .side div 의 너비는 100px 이고 .center div 의 너비는 150 px. 만약 .container div 가 350px 의 정확한 넓이를 갖고 있다면.

        만약 .container div 가 더 크면 .center div 는 .side div 에 비해 두 배의 공간을 차지할 것.
        flex-shrink 값도 같은 방식으로 작동함.

    flex
        flex 속성은 flex-grow, flex-shrink, flex-basis 를 한 줄에 작성할 수 있게 함. 이 속성은 display 속성의 flex 값과는 다름.

        .big {
            flex-grow: 2;
            flex-shrink: 1;
            flex-basis: 150px;
        }
        
        .small {
            flex-grow: 1;
            flex-shrink: 2;
            flex-basis: 100px;
        }

        .big {
            flex: 2 1 150px;
        }
        
        .small {
            flex: 1 2 100px;
        }

        위 예시는 서로 같은 값.

        .big {
            flex: 2 1;
        }

        이렇게 쓰면 flex-grow 와 flex-shrink 만 선언한 것. flex-basis 제외.

        .small {
            flex: 1 20px;
        }

        이렇게 쓰면 flex-grow 와 flex-basis 만 작성한 것. 2개의 값으로는 flex-shrink 와 flex-basis 만 지정할 수는 없음.


    flex-wrap
        컨텐츠가 컨테이너에 꼭 맞게 줄어들지 않고 다음 줄로 내려가게 하려면 flex-wrap 속성을 사용하면 됨.

        flex-wrap 의 value
            1. wrap: 줄에 맞지 않는 자식 요소는 다음 줄로 내려감.
            2. wrap-reverse: 작동 방식은 wrap 과 같지만 줄의 순서가 뒤집어짐.
            3. nowrap: 아이템들이 랩핑되지 않게 방지함. 이게 디폴트 값이며 다른 css 규칙에 의해 설정된 랩 값만 재정의 하면 됨.

        <div class="container">
            <div class="item">
                <h1>We're going to wrap!</h1>
            </div>
            <div class="item">
                <h1>We're going to wrap!</h1>
            </div>
            <div class="item">
                <h1>We're going to wrap!</h1>
            </div>
        </div>

        .container {
            display: inline-flex;
            flex-wrap: wrap;
            width: 250px;
        }
        
        .item {
            width: 100px;
            height: 100px;
        }

        이 예시에서 3개의 flex item 들은 flex container 를 부모 컨테이너로 갖고 있음.
        container 는 250px 이기 때문에 세 item들을 모두 담을 수 없음. 이때 flex-wrap 으로 인해 세번째 item 은 앞의 두 item 아래의 새 줄에 나타남.

        * 주의점: flex-wrap 은 flex container 에 선언해야 함.

    Align-content
        앞에서 align-items 를 통해 수직 정렬을 했다면, flex-container 가 여러 줄의 컨텐츠를 갖고 있을 경우, align-content 로 컨텐츠의 수직 정렬이 가능.

        align-content 의 value
            1. flex-start: 요소들의 모든 줄이 여백 없이 부모 컨테이너의 상단에 위치
            2. flex-end: 요소들의 모든 줄이 여백 없이 부모 컨테이너의 하단에 위치
            3. center: 요소들의 모든 줄이 여백 없이 부모 컨테이너의 중앙에 위치
            4. space-between: 모든 요소들의 행은 첫번째 또는 마지막 행보다 아래에 공백이 없는 상태에서 컨테이너의 상단부터 하단까지 균일한 간격으로 배치. (중간 여백을 두고 상단, 하단에 딱 붙음)
            5. space-around: 모든 요소들의 행은 컨테이너의 상단에서 하단까지 균일한 간격으로 배치. 각 요소 사이 동일한 여백.
            6. stretch: 만약 최소 높이를 지정하거나 높이를 지정하지 않는 경우 요소의 행이 확장되어 상위 컨테이너를 위에서 아래로 채움(디폴트).

    flex-direction
        flex container 는 두 가지 축을 가지고 있음.
        main axis(가로축) 와 cross axis(세로축)

        item 의 main axis 속성
            1. justify-content
            2. flex-wrap
            3. flex-grow
            4. flex-shrink

        item 의 cross axis 속성
            1. align-items
            2. align-content

        그런데 두 축은 바꿔서 사용할 수 있음. 그러기 위해 flex-direction 을 사용함.

        만약 flex-direction 의 값을 column 으로 설정하면 item 들은 수평이 아니라 수직으로 정렬됨.

        flex-direction 의 value
            1. row: 요소들은 부모 컨테이너의 왼쪽 상단부터 시작해 왼쪽에서 오른쪽으로 배치됨. (디폴트)
            2. row-reverse: 요소들은 부모 컨테이너의 오른쪽 상단에서 시작해 오른쪽에서 왼쪽으로 배치됨.
            3. column: 요소들은 부모요소의 왼쪽 위부터 위에서 아래로 배치됨.
            4. column-reverse: 요소들은 부모요소의 왼쪽 하단부터 아래에서 위로 배치됨.
        
        * 주의점: flex-direction 은 부모 컨테이너에 선언되야 함.

    flex-flow
        flex 속성과 같이, flex-flow 로 flex-wrap 과 flex-direction 이 한 줄에 작성할 수 있음.

        .container {
            display: flex;
            flex-wrap: wrap;
            flex-direction: column;
        }

        .container {
            display: flex;
            flex-flow: column wrap;
        }

        두 코드는 동일한 코드. 두번째 코드에서 flex-flow 의 첫번째 value는 flex-direction 이고 두번째 value 는 flex-wrap. 

        * 주의점: flex-flow 은 부모 컨테이너에 선언되야 함.

    Nested Flexboxes
        지금까지 배운 것들은 flex-container 가 다른 container 안에 들어 있을 때도 적용가능함.

        <div class="container">
            <div class="left">
                <img class="small" src="#"/>
                <img class="small" src="#"/>
                <img class="small" src="#" />
            </div>
            <div class="right">
                <img class="large" src="#" />
            </div>
        </div>

        .container {
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .left {
            display: inline-flex;
            flex: 2 1 200px;
            flex-direction: column;
        }
        
        .right {
            display: inline-flex;
            flex: 1 2 400px;
            align-items: center;
        }
        
        .small {
            height: 200px;
            width: auto;
        }
        
        .large {
            height: 600px; 
            width: auto;
        }